#include <SPI.h>
#include <WiFiNINA.h>
#include <Servo.h>

void setup() {
  // Initialize serial and wiat for prot to open:
  Serial.begin(9600);

  pinMode(2,OUTPUT);  //Uses Pin 2 to display LED when scan finds WiFi Network

  // check for the WiFi module:
 if (WiFi.status()==WL_NO_MODULE){
    Serial.println("Communication with WiFi moduel failed!");
    // don't continue
    while (true);
  }
 // check for the latest WiFi Firmware version
  String fv = WiFi.firmwareVersion();
  if (fv < WIFI_FIRMWARE_LATEST_VERSION){
    Serial.println("Please upgrade the firmware");
  }
  // print your MAC address:
  byte mac[6];
  WiFi.macAddress(mac);
  Serial.print("MAC: ");
  printMacAddress(mac);
}

void loop() {
  // scan for existing networks:
 // Serial.println("Scanning available networks...");
 // digitalWrite(2,HIGH);
  //delay(500);
  digitalWrite(2,LOW);   
  listNetworks();
  delay(5000);
}

// scan for nearby networks:
void listNetworks() {
  digitalWrite(2, HIGH);
  Serial.println("** Scan Networks **");
  int numSsid = WiFi.scanNetworks();
  digitalWrite(2,LOW);
  if (numSsid == -1) {
    Serial.println("Couldn't get a wifi connection");
    while (true);
    
  }

 // print the list of networks seen:
  Serial.print("number of available networks:");
  digitalWrite(2,HIGH);
  delay(500);
  Serial.println(numSsid);
  digitalWrite(2,LOW);

 // print the network number and name for each network found:
  for (int thisNet = 0; thisNet < numSsid; thisNet++) {
    Serial.print(thisNet);
    Serial.print(") ");
    Serial.print(WiFi.SSID(thisNet));
    Serial.print("\tSignal: ");
    Serial.print(WiFi.RSSI(thisNet));
    Serial.print(" dBm");
    Serial.print("\tEncryption: ");
    printEncryptionType(WiFi.encryptionType(thisNet));

  }

}  

// read the encryption type and print out the title:
void printEncryptionType(int thisType) {
  switch (thisType) {
    case ENC_TYPE_WEP:
      Serial.println("WEP");
      break;
    case ENC_TYPE_TKIP:
      Serial.println("WPA");
      break;
    case ENC_TYPE_CCMP:
      Serial.println("WPA2");
      break;
    case ENC_TYPE_NONE:
      Serial.println("Open");
      break;
    case ENC_TYPE_AUTO:
      Serial.println("Auto");
      break;
    case ENC_TYPE_UNKNOWN:
    default:
      Serial.println("Unknown");
      break;
  }
}

//MAC Address printing module to print Layer 2 address for module
void printMacAddress(byte mac[]) {
  for (int i = 5; i >= 0; i--) {
    if (mac[i] < 16) {
      Serial.print("0");
    }
    Serial.print(mac[i], HEX);
    if (i > 0) {
      Serial.print(":");
    }
  }
  Serial.println();
}
